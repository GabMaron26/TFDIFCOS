# -*- coding: utf-8 -*-
"""TFIDF_COS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M7oW1NF5MGDcutpYYC_9keVKh5FV7zsc

Gabriel Maron Machado Lima
Sua tarefa será gerar a matriz termo-documento usando TF-IDF por meio da aplicação das fórmulas TF-IDF na matriz termo-documento criada com a utilização do algoritmo Bag of Words. Sobre o Corpus que recuperamos anteriormente. O entregável desta tarefa é uma matriz termo-documento onde a primeira linha são os termos e as linhas subsequentes são os vetores calculados com o TF-IDF.
Sua tarefa será gerar uma matriz de distância, computando o cosseno do ângulo entre todos os vetores que encontramos usando o tf-idf. Para isso use a seguinte fórmula para o cálculo do cosseno use a fórmula apresentada em Word2Vector (frankalcantara.com) (https://frankalcantara.com/Aulas/Nlp/out/Aula4.html#/0/4/2) e apresentada na figura a seguir:O resultado deste trabalho será uma matriz que relaciona cada um dos vetores já calculados com todos os outros vetores disponíveis na matriz termo-documento mostrando a distância entre cada um destes vetores.
"""

#bag of words
palavras = []
numerodefrases = 
for text in textlist:
  for frase in text:
    numerodefrases += 1
    for palavra in frase.split(' '):
      if palavra not in palavras:
        palavras.append(palavra)
BAGOF = numpy.zeros((numerodefrases,len(palavras)))
numerodefrases = 0
for text in textlist:
  for frases in text:
    for palavra in frases.split(' '):
      BAGOF[numerodefrases][palavras.index(palavra)] += 1
    numerodefrases += 1
    print(BAGOF)

#tf
numerodefrases = 0
TF = numpy.zeros((len(BOW),len(BOW[0])))
for text in textlist:
  for frases in text:
    numerodepalavras = len(frases.split(' '))
    for palavra in frases.split(' '):
      TF[numerodefrases][palavras.index(palavra)] = BOW[numerodefrases][palavras.index(palavra)] / numerodepalavras#calcula o TF
    numerodefrases += 1
print(TF)

#corpus
#importa as bibliotecas

from bs4 import BeautifulSoup
import requests
import string
import numpy 

text = []
textlist = []

1url = 'https://www.datarobot.com/blog/what-is-natural-language-processing-introduction-to-nlp/'

html1 = requests.get(1url)
site1 = BeautifulSoup(html1.content, 'html.parser')
pegarconteudos1 = site1.find_all("p")
for 1url in pegarconteudos1:
  text.append(1url.get_text())

2url = 'https://www.qualtrics.com/experience-management/customer/natural-language-processing/'

html2 = requests.get(2url)
site2 = BeautifulSoup(html2.content, 'html.parser')
pegarconteudos2 = site2.find_all("p")
for 2url in pegarconteudos2:
  text.append(2url.get_text())

3url = 'https://www.oanayucel.ro/en/nlp-what-is-it-and-how-can-it-help-you/'

html3 = requests.get(3url)
site3 = BeautifulSoup(html3.content, 'html.parser')
pegarconteudos3 = site3.find_all("p")
for 3url in pegarconteudos3:
  text.append(3url.get_text())

4url = 'https://viso.ai/deep-learning/natural-language-processing/'

html4 = requests.get(4url)
site4 = BeautifulSoup(html4.content, 'html.parser')
pegarconteudos4 = site4.find_all("p")
for 4url in pegarconteudos4:
  text.append(4url.get_text())

5url = 'https://www.oracle.com/hk/artificial-intelligence/what-is-natural-language-processing/'

html5 = requests.get(5url)
site5 = BeautifulSoup(html5.content, 'html.parser')
pegarconteudos5 = site5.find_all("p")
for 5url in pegarconteudos5:
  text.append(5url.get_text())
textlist.append(text)

print(textlist)

#idf
idf = []
for palavra in range(len(palavras)):
  palavrasanalisadas = 
  for frasesanalisadas in BOW:
    if frasesanalisadas[palavra] > 0: palavrasanalisadas += 1
  idf.append(numpy.log10(len(BOW)/palavrasanalisadas))
  print(idf)

#tfidf
TFIDF = numpy.zeros((len(BOW),len(BOW[0])))
for a in range(len(TFIDF)):
  for b in range(len(TFIDF[0])):
    TFIDF[a][b] = TF[a][b] * IDF[b]
print(TFIDF)

#similaridade de cosseno
arraysTFIDF = numpy.zeros((len(TFIDF),len(TFIDF)))
array = 0
for vector in TFIDF
  a = array
  while a < len(TFIDF):
    distancia = numpy.dot(vector,TFIDF[a])/(numpy.linalg.norm(vector)*numpy.linalg.norm(TFIDF[a])) 
    arraysTFIDF[array][a] = distancia
    arraysTFIDF[a][array] = distancia
    array += 1
    a += 1

print(arraysTFIDF)